generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}


model Role {
  id    Int     @id @default(autoincrement())
  name  String  @unique

  userRoles UserRole[]
}

model User {
  id           String   @id
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  isActive     Int      @default(1) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  userRoles UserRole[]
  inventoryMovements InventoryMovement[] @relation("UserMovements")
  auditLogs AuditLog[]
}

model UserRole {
  userId String
  roleId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model Supplier {
  id          Int      @id @default(autoincrement())
  name        String
  cnpj        String?
  contactName String?  @map("contact_name")
  email       String?
  phone       String?
  createdAt   DateTime @default(now()) @map("created_at")

  nfe        Nfe[]
  deliveries Delivery[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[]
}

model Unit {
  id          Int    @id @default(autoincrement())
  code        String @unique
  description String?
  factorToBase Float @default(1.0) @map("factor_to_base")

  products Product[]
}

model Warehouse {
  id       Int    @id @default(autoincrement())
  code     String @unique
  name     String
  location String?

  meta      WarehouseMeta?
  movements InventoryMovement[]
  origins   TransportMatrix[] @relation("OriginWarehouse")
  dests     TransportMatrix[] @relation("DestWarehouse")
}

model WarehouseMeta {
  warehouseId Int    @id
  kind        String
  managerName String? @map("manager_name")
  phone       String?
  openHours   String? @map("open_hours")
  address     String?
  city        String?
  state       String?
  country     String?

  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
}

model Product {
  id        Int      @id @default(autoincrement())
  sku       String   @unique
  name      String
  categoryId Int?    @map("category_id")
  unitId    Int      @map("unit_id")
  minStock  Float    @default(0.0) @map("min_stock")
  ncm       String?
  gtin      String?
  active    Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")

  category Category? @relation(fields: [categoryId], references: [id])
  unit     Unit     @relation(fields: [unitId], references: [id])

  movements InventoryMovement[]
}

model MovementType {
  id        Int    @id @default(autoincrement())
  code      String @unique
  direction Int

  movements InventoryMovement[]
}

model Nfe {
  id         Int    @id @default(autoincrement())
  accessKey  String? @unique @map("access_key")
  number     String?
  series     String?
  issuedAt   DateTime? @map("issued_at")
  supplierId Int?

  supplier Supplier? @relation(fields: [supplierId], references: [id])
  movements InventoryMovement[]
}

model InventoryMovement {
  id          Int      @id @default(autoincrement())
  productId   Int
  warehouseId Int
  typeId      Int
  quantity    Float
  unitCost    Float?   @map("unit_cost")
  docRef      String?  @map("doc_ref")
  nfeId       Int?
  occurredAt  DateTime @map("occurred_at")
  createdBy   String?  @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")

  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  type      MovementType @relation(fields: [typeId], references: [id])
  nfe       Nfe?      @relation(fields: [nfeId], references: [id])
  user      User?     @relation("UserMovements", fields: [createdBy], references: [id])
}

model Delivery {
  id         Int      @id @default(autoincrement())
  supplierId Int?
  expectedAt DateTime? @map("expected_at")
  receivedAt DateTime? @map("received_at")
  notes      String?

  supplier Supplier? @relation(fields: [supplierId], references: [id])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  tableName String   @map("table_name")
  rowId     String   @map("row_id")
  action    String
  userId    String?
  changedAt DateTime @default(now()) @map("changed_at")
  details   String?

  user User? @relation(fields: [userId], references: [id])
}

model TransportMatrix {
  id          Int     @id @default(autoincrement())
  originWhId  Int     @map("origin_wh_id")
  destWhId    Int     @map("dest_wh_id")
  mode        String
  distanceKm  Float?  @map("distance_km")
  leadTimeHrs Float   @map("lead_time_hours")
  costFixed   Float   @default(0) @map("cost_fixed")
  costPerUnit Float   @default(0) @map("cost_per_unit")
  isActive    Int     @default(1) @map("is_active")

  origin Warehouse @relation("OriginWarehouse", fields: [originWhId], references: [id])
  dest   Warehouse @relation("DestWarehouse", fields: [destWhId], references: [id])

  @@unique([originWhId, destWhId, mode])
}
